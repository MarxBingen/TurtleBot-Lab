#! /urs/bin/env pythonimport roslibroslib.load_manifest('tb_base')import rospyimport actionlibfrom tb_base.msg import DriveForwardActionfrom nav_msgs.msg import Odometryfrom geometry_msgs.msg import Twist, Pointclass TBDriveForwardServer:	def __init__(self):		self.server = actionlib.SimpleActionServer('DriveForward',DriveForwardAction,self.execute,False)		#Status und Variable setzen		self.initialOdomPosSet = False		self.initialOdomPos = None		#Subscribe to Odom und Bumper		self.odomSub = rospy.Subscriber('odom',Odometry,queue_size=1,callback=self.odomCallback)		self.movePub = rospy.Publisher('cmd_vel_mux/input/safety_controller',Twist, queue_size=1)		#Server starten		self.server.start()	def odomCallback(self,odom):		if (self.initialOdomPosSet == False):			self.initialOdomPos = odom.pose.pose.position			self.initialOdomPosSet = True		self.lastOdomPos = odom.pose.pose.position		if (self.status == 'Driving'):			self.update()	def execute(self, goal):		self.speed = goal.speed		self.distance = goal.distance		self.status = 'Driving'		self.server.set_succeeded()			def update(self):		twist = Twist()		twist.linear.x = self.speed		sop = self.initialOdomPos		cop = self.lastOdomPos		odomDiffX = abs(sop.x - cop.x)		odomDiffY = abs(sop.y - cop.y)		if odomDiffX > self.distance or odomDiffY > self.distance:			print "Gefahren"			self.status = 'Stopped'			break		wc = self.wallDetector.wallGetsCloser()		if (not wc == ''):			if wc == 'rechts':				twist.angular.z=0.5			elif wc == 'links':				twist.angular.z=-0.5			elif wc == 'mitte':				self.movePub.publish(Twist())				print "Stop vor Wand"				break		else:			twist.angular.z = 0.0		self.movePub.publish(twist)if __name__ =='__main__':	rospy.init_node('TBDriveForwardServer')	server = TBDriveForwardServer()	rospy.spin()